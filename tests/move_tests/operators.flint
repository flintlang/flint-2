contract Operators {
  visible let test: Bool = true || false && false || true
}

Operators :: (any) {
  public init() {}

  public func lt(a: Int, b: Int) -> Bool {
    return a < b
  }

  public func gt(a: Int, b: Int) -> Bool {
    return a > b
  }

  public func le(a: Int, b: Int) -> Bool {
    return a <= b
  }

  public func ge(a: Int, b: Int) -> Bool {
    return a >= b
  }

  public func plus(a: Int, b: Int) -> Int {
    return a + b
  }

  public func minus(a: Int, b: Int) -> Int {
    return a - b
  }

  public func times(a: Int, b: Int) -> Int {
    return a * b
  }

  public func divide(a: Int, b: Int) -> Int {
    return a / b
  }

  public func equal(a: Int, b: Int) -> Bool {
    return a == b
  }

  public func notEqual(a: Int, b: Int) -> Bool {
    return a != b
  }

  public func orOp(a: Bool, b: Bool) -> Bool {
    return a || b
  }

  public func andOp(a: Bool, b: Bool) -> Bool {
    return a && b
  }

  // public func power(a: Int, b: Int) -> Int {
  //  return a ** b
  //}

  //public func remainder(a: Int, b: Int) -> Int {
  //  return a % b
  //}
}