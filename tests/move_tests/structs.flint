struct A {
  public var x: Int
  public var y: Bool

  public init() {
    x = 0
    y = false
  }

  func getX() -> Int {
    return x
  }

  func setX(x: Int) mutates (x) {
    self.x = x
  }

  func getY() -> Int {
    return getX()
  }
}

struct B {
  public var x: A
  public var y: Int

  public init() {
    x = A()
    y = 0
  }

  func getXx() -> Int {
    return x.getX()
  }

  func getXx2() -> Int {
    return x.getY()
  }

  func setXx(y: Int) mutates (x) {
    x.setX(x: y)
  }
}

contract C {
  var a: A = A()
  var arr: Maybe = Maybe()
  var b: B = B()
  var c: B = B()
  let d: Int = 5
  var e: Bool
}

C :: (any) {
  public init() {
    e = true
    // Known issue that calling contract method from contract
    // initialiser breaks
    // getE()
  }

  public func getAx() -> Int {
    return a.x
  }

  public func setAx(x: Int) mutates (a) {
    a.x = x
  }

  public func getAy() -> Bool {
    return a.y
  }

  public func setAy(y: Bool) mutates (a) {
    a.y = y
  }

  public func getBxx() -> Int {
    return b.x.x
  }

  public func setBxx(x: Int) mutates (b) {
    b.x.x = x
  }

  public func getBxx2() -> Int {
    return b.getXx()
  }

  public func getBxx3() -> Int mutates (b) {
    setBxx(x: 2 ** 8)
    return b.getXx2()
  }

  public func setBxx2(x: Int) mutates (b) {
    b.setXx(y: x)
  }

  public func setBxx3(x: Int) mutates (b, a) {
    setB(b: &self.b, x: x)
  }

  public func setCxx(x: Int) mutates (c) {
    c.setXx(y: x)
  }

  public func setCxx2(x: Int) mutates (b) {
    setB(b: &c, x: x)
  }

  public func getCxx() -> Int {
    return c.getXx()
  }

  // TODO this is where this test fails. It does not alter the same copy of b
  // b.setXx works correctly on its b, but it does not affect the b passed in.
  func setB(b: inout B, x: Int) mutates (b) {
    b.setXx(y: x)
  }

  public func getBxy() -> Bool {
    return b.x.y
  }

  public func setBxy(y: Bool) mutates (b) {
    let marker: Int = 1000020
    b.x.y = y
  }

  public func getBy() -> Int {
    return b.y
  }

  public func setBy(y: Int) mutates (b) {
    b.y = y
  }

  public func append(x: Int) mutates (arr) {
    arr.add(value: x)
  }

  public func get(x: Int) -> Int {
    return arr.get(n: x)
  }

  public func getSize() -> Int {
    return arr.size
  }

  public func getD() -> Int {
    return d
  }

  public func getE() -> Bool {
    return self.e
  }
}

struct Maybe {
  var element: Int
  visible var size: Int

  public init() {
    element = 0
    size = 0
  }

  func add(value: Int) mutates (element, size) {
    element = value
    size = 1
  }

  func get(n: Int) -> Int {
    if (self.size != 0) {
      return self.element
    } else {
      return 0
    }
  }

  func getSize() -> Int {
    return size
  }
}