import {{default}}.Operators;
import 0x1.Signer;

main(account: &signer) {
    Operators.publish(copy(account));
    
    // Comparison
    assert(Operators.lt(Signer.address_of(copy(account)), 0, 1, copy(account)), 2);
    assert(Operators.gt(Signer.address_of(copy(account)), 1, 0, copy(account)), 2);
    assert(Operators.le(Signer.address_of(copy(account)), 1, 1, copy(account)), 2);
    assert(Operators.le(Signer.address_of(copy(account)), 0, 1, copy(account)), 2);
    assert(Operators.ge(Signer.address_of(copy(account)), 1, 1, copy(account)), 2);
    assert(Operators.ge(Signer.address_of(copy(account)), 1, 0, copy(account)), 2);
    assert(Operators.equal(Signer.address_of(copy(account)), 0, 0, copy(account)), 2);
    assert(Operators.equal(Signer.address_of(copy(account)), 1, 1, copy(account)), 2);
    assert(Operators.notEqual(Signer.address_of(copy(account)), 0, 1, copy(account)), 2);
    assert(Operators.notEqual(Signer.address_of(copy(account)), 1, 0, copy(account)), 2);

    // Arithmetic
    assert(Operators.plus(Signer.address_of(copy(account)), 9, 3, copy(account)) == 12, 3);
    assert(Operators.plus(Signer.address_of(copy(account)), 0, 12, copy(account)) == 12, 3);
    assert(Operators.minus(Signer.address_of(copy(account)), 21, 9, copy(account)) == 12, 3);
    assert(Operators.minus(Signer.address_of(copy(account)), 10000, 9988, copy(account)) == 12, 3);
    assert(Operators.times(Signer.address_of(copy(account)), 3, 4, copy(account)) == 12, 3);
    assert(Operators.times(Signer.address_of(copy(account)), 2, 6, copy(account)) == 12, 3);
    assert(Operators.divide(Signer.address_of(copy(account)), 24, 2, copy(account)) == 12, 3);
    assert(Operators.divide(Signer.address_of(copy(account)), 156, 13, copy(account)) == 12, 3);
    //assert(Operators.power(Signer.address_of(copy(account)), 5, 2, copy(account)) == 25, 3);
    //assert(Operators.power(Signer.address_of(copy(account)), 2, 10, copy(account)) == 1024, 3);
    //assert(Operators.remainder(Signer.address_of(copy(account)), 10, 3, copy(account)) == 1, 3);
    //assert(Operators.remainder(Signer.address_of(copy(account)), 27, 8, copy(account)) == 3, 3);

    // Logic
    assert(Operators.andOp(Signer.address_of(copy(account)), false, false, copy(account)) == false, 4);
    assert(Operators.andOp(Signer.address_of(copy(account)), true, false, copy(account)) == false, 4);
    assert(Operators.andOp(Signer.address_of(copy(account)), false, true, copy(account)) == false, 4);
    assert(Operators.andOp(Signer.address_of(copy(account)), true, true, copy(account)) == true, 4);
    assert(Operators.orOp(Signer.address_of(copy(account)), false, false, copy(account)) == false, 4);
    assert(Operators.orOp(Signer.address_of(copy(account)), true, false, copy(account)) == true, 4);
    assert(Operators.orOp(Signer.address_of(copy(account)), false, true, copy(account)) == true, 4);
    assert(Operators.orOp(Signer.address_of(copy(account)), true, true, copy(account)) == true, 4);
  
    return;
}