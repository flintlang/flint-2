contract MoneyPot {
  visible var value: Libra
  var owner: Address
}

MoneyPot :: sender <- (any) {
  public init(initiliaser: Address) {
    value = Libra()
    owner = initiliaser
  }

  public func getBalance() -> Int {
    return value.balance()
  }

  public func getOwner() -> Address {
    return owner
  }

  @payable
  public func deposit(amount: Libra) mutates(owner) {
    var oldBalance: Int
    oldBalance = getBalance()
    value.transfer_value(source: amount)
    if (getBalance() - oldBalance) > oldBalance {
        owner = sender
    }
  }
}

MoneyPot :: (owner) {
    public func withdraw() mutates(value) {
        var balance: Int
        balance = value.balance()
        send(owner, balance, &value)
    }
}